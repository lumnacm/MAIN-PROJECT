<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat</title>
    <script src="/socket.io/socket.io.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body>
    <section class="chat-section">
        <div class="chat-container">
            <div class="chat-header">
                <div class="user-info">
                    <div class="avatar">
                        {{#if isPsychiatrist}}
                            {{firstChar otherUser.Fname}}
                        {{else}}
                            {{firstChar otherUser.Name}}
                        {{/if}}
                    </div>
                    <div class="user-details">
                        <h2>{{#if isPsychiatrist}}{{otherUser.Fname}} {{otherUser.Lname}}{{else}}{{otherUser.Name}}{{/if}}</h2>
                        <span class="status" id="typing-status"></span>
                    </div>
                </div>
            </div>

            <div id="messages" class="messages">
                {{#each messages.messages}}
                <div class="message {{#if (eq this.sendBy ../user._id)}}message-right{{else}}message-left{{/if}}">
                    <div class="message-content">
                        {{this.message}}
                    </div>
                    <div class="message-metadata">
                        <span class="message-time">{{formatTimes this.createdAt}}</span>
                        {{#if (eq this.sendBy ../user._id)}}
                            <span class="message-status">
                                <i class="fas fa-check-double"></i>
                            </span>
                        {{/if}}
                    </div>
                </div>
                {{/each}}
            </div>

            <div class="chat-input">
                <div class="input-wrapper">
                    <textarea id="message" placeholder="Type a message..." autocomplete="off"></textarea>
         
                </div>
                <button id="send-button">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </div>
        </div>
    </section>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const chatRoomId = "{{messages._id}}";
            const userId = "{{user._id}}";
            const userName = "You";
            const isPsychiatrist = {{isPsychiatrist}};
            const messageInput = document.getElementById("message");
            const messagesDiv = document.getElementById("messages");
            const sendButton = document.getElementById("send-button");
            const typingStatus = document.getElementById("typing-status");
            
            let typingTimeout;

            // Initialize Socket.io connection
            const socket = io({
                query: {
                    chatRoomId: chatRoomId,
                    userId: userId
                }
            });

            // Socket event listeners
            socket.on('connect', () => {
                console.log('Connected to Socket.io server');
            });

            socket.on('getMessage', (data) => {
                if (data.sendBy !== userId) {

                    
                    // Remove typing indicator
                    typingStatus.textContent = '';
                    
                    // Append message
                    appendMessage(
                        data.message,
                        data.sendBy,
                        data.sendByName,
                        data.timestamp
                    );

                    // Show browser notification if page is not visible
                    if (document.hidden) {
                        showNotification(data.sendByName, data.message);
                    }
                }
            });

            socket.on('userTyping', (data) => {
                if (data.userId !== userId) {
                    typingStatus.textContent = 'typing...';
                    clearTimeout(typingTimeout);
                    typingTimeout = setTimeout(() => {
                        typingStatus.textContent = '';
                    }, 3000);
                }
            });

            // Typing indicator
            messageInput.addEventListener('input', () => {
                socket.emit('typing', {
                    chatRoomId,
                    userId
                });
            });

            function showNotification(sender, message) {
                if ('Notification' in window && Notification.permission === 'granted') {
                    new Notification('New message from ' + sender, {
                        body: message,
                        icon: '/icon.png'
                    });
                }
            }

            function formatTime(date) {
                const d = new Date(date);
                return d.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            }

            function appendMessage(msg, senderId, senderName, timestamp) {
                const messageDiv = document.createElement("div");
                messageDiv.classList.add("message", senderId === userId ? "message-right" : "message-left");
                
                const content = document.createElement("div");
                content.classList.add("message-content");
                content.textContent = msg;
                
                const metadata = document.createElement("div");
                metadata.classList.add("message-metadata");
                metadata.innerHTML = `
                    <span class="message-time">${formatTime(timestamp)}</span>
                    ${senderId === userId ? '<span class="message-status"><i class="fas fa-check-double"></i></span>' : ''}
                `;
                
                messageDiv.appendChild(content);
                messageDiv.appendChild(metadata);
                messagesDiv.appendChild(messageDiv);
                messagesDiv.scrollTop = messagesDiv.scrollHeight;
            }

            async function sendMessage(content) {
                try {
                    const response = await fetch("/chat/send-message", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ chatRoomId, message: content, sendBy: userId, isPsychiatrist })
                    });
                    if (!response.ok) throw new Error("Failed to send message");
                    
                    socket.emit('sendMessage', {
                        chatRoomId,
                        message: content,
                        sendBy: userId,
                        sendByName: userName,
                        timestamp: new Date()
                    });
                } catch (error) {
                    console.error("Error sending message:", error);
                    // Show error toast
                }
            }


            async function handleSendMessage() {
                const messageContent = messageInput.value.trim();
                if (!messageContent) return;
                const timestamp = new Date();
                await sendMessage(messageContent);
                appendMessage(messageContent, userId, userName, timestamp);
                messageInput.value = "";
                messageInput.focus();
            }

            // Request notification permission
            if ('Notification' in window) {
                Notification.requestPermission();
            }

            // Event listeners
            sendButton.addEventListener("click", handleSendMessage);
            messageInput.addEventListener("keypress", (e) => {
                if (e.key === "Enter" && !e.shiftKey) {
                    e.preventDefault();
                    handleSendMessage();
                }
            });

            // Auto-resize textarea
            messageInput.addEventListener('input', function() {
                this.style.height = 'auto';
                this.style.height = (this.scrollHeight) + 'px';
            });

            // Join the chat room
            socket.emit('join', chatRoomId);
        });
    </script>

    <style>

        .chat-section {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 90vh;
            width:100%;
            background: #f0f2f5;
            padding: 0;
        }

        .chat-container {
            width: 100%;
            height: 100%;
            background: white;

            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        .chat-header {
            padding: 16px;
            border-bottom: 1px solid #e5e5e5;
            background: white;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .avatar {
            width: 40px;
            height: 40px;
            background: #0084ff;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            font-size: 18px;
        }

        .user-details h2 {
            font-size: 16px;
            color: #1c1e21;
            margin: 0;
        }

        .status {
            font-size: 13px;
            color: #65676b;
        }

        .messages {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
            background: white;
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .message {
            max-width: 65%;
            display: flex;
            flex-direction: column;
            gap: 4px;
        }

        .message-content {
            padding: 12px 16px;
            border-radius: 18px;
            font-size: 14px;
            line-height: 1.4;
        }

        .message-right {
            align-self: flex-end;
        }

        .message-right .message-content {
            background: #0084ff;
            color: white;
            border-bottom-right-radius: 4px;
        }

        .message-left {
            align-self: flex-start;
        }

        .message-left .message-content {
            background: #f0f0f0;
            color: #1c1e21;
            border-bottom-left-radius: 4px;
        }

        .message-metadata {
            display: flex;
            align-items: center;
            gap: 4px;
            font-size: 12px;
            color: #65676b;
            padding: 0 8px;
        }

        .message-right .message-metadata {
            justify-content: flex-end;
        }

        .message-status i {
            font-size: 12px;
            color: #0084ff;
        }

        .chat-input {
            padding: 16px;
            border-top: 1px solid #e5e5e5;
            background: white;
            display: flex;
            gap: 12px;
            align-items: flex-end;
        }

        .input-wrapper {
            flex: 1;
            background: #f0f2f5;
            border-radius: 24px;
            padding: 8px 16px;
            display: flex;
            align-items: flex-end;
        }

        textarea {
            flex: 1;
            border: none;
            background: transparent;
            min-height: 20px;
            max-height: 100px;
            padding: 8px 0;
            resize: none;
            font-size: 14px;
            line-height: 1.4;
            outline: none;
        }

        .input-actions {
            display: flex;
            gap: 8px;
            padding-bottom: 8px;
        }

        button {
            background: none;
            border: none;
            color: #0084ff;
            cursor: pointer;
            padding: 8px;
            border-radius: 50%;
            transition: background-color 0.2s;
        }

        button:hover {
            background-color: #f0f2f5;
        }

        #send-button {
            width: 40px;
            height: 40px;
            background: #0084ff;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        #send-button:hover {
            background: #0073e6;
        }

        .toast {
            position: fixed;
            bottom: 24px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 12px 24px;
            border-radius: 8px;
            font-size: 14px;
            animation: fadeIn 0.3s, fadeOut 0.3s 2.7s;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translate(-50%, 20px); }
            to { opacity: 1; transform: translate(-50%, 0); }
        }

        @keyframes fadeOut {
            from { opacity: 1; transform: translate(-50%, 0); }
            to { opacity: 0; transform: translate(-50%, 20px); }
        }

        /* Scrollbar styling */
        .messages::-webkit-scrollbar {
            width: 8px;
        }

        .messages::-webkit-scrollbar-track {
            background: transparent;
        }

        .messages::-webkit-scrollbar-thumb {
            background: #bcc0c4;
            border-radius: 4px;
        }

        .messages::-webkit-scrollbar-thumb:hover {
            background: #9ca0a4;
        }
    </style>
</body>
</html>